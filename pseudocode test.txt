1. Check if the process is >2 if not continue to step 3 else go to step 2;
2. Get the values of the sorted array, alternatingly store the [max and min burst time] until you end up on its middle value; (KLEENE)*****
   If the total no. of process is an odd number the last index will be set stored at the middle of the array;

3. Quantum time of the process, subtract the maximum burst time with the minimum burst time of the current process and divide it by two then return its value, if process size is <=2 return the minimum burst time;

4. Start to calculate the waiting time for each process
   4.a Check if the current burst time of the selected process is greater than 0 [> 0] if yes, the value of the checker will be set to [0] then it will continue to 4.b, if not go to step 4.c;
   4.b If the current burst time of the selected process has a greater value than the quantum time, then quantum time will be subtracted to the current burst time [process[current] - qt] and the quantum time will be added to time variable [time += qt], continue to step 4.e;
       If false, the remaining burst time value of the current process will be added to time variable [time += process[currrent]], then the waiting time array with the same index as the process will store a value of time subtracted to the original burst time value of the current process[waiting_time[current] = time - process[current]];
       Set the burst time of the current process to 0;
       If false go to the next process and execute step 4.a, If the loop is over go to step 4.c (KLEENE)*****
   4.c If the checker has a value of 0 go to step 4.e, if the checker has a value of 1 go to step 5;

5. Start to calculate the turn around time for each process create empty array then;
   the current turn around process will get the sum of the current waiting time and current burst time [turnAround[current] = waitingTime[current] + process[current] repeat until last process then go to step 6;

6.Display the result
 6.a Print the process value, burst time, waiting time, average time repeat until last process.
 6.b Display the average waiting time, summation of all waiting time divided to number of process [totalWaitingTime/totalNumberOfProcess]
 6.c Display the average turnaround time, summation of all turnaroun time divided to number of process [totalTunrAroundTime/totalNumberOfProcess]
